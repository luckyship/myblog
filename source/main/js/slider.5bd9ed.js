(()=>{var __webpack_modules__={"./source-src/js/Q.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar module = {\n  exports: {}\n};\nvar exports = module.exports;\n(function () {\n  /*!\r\n   * Q.js v1.0.12\r\n   * Inspired from vue.js\r\n   * (c) 2016 Daniel Yang\r\n   * Released under the MIT License.\r\n   */\n\n  /**\r\n   * Just support modern browser\r\n   */\n\n  (function webpackUniversalModuleDefinition(root, factory) {\n    if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && __webpack_require__.amdO) define([], factory);else if (typeof exports === 'object') exports[\"Q\"] = factory();else root[\"Q\"] = factory();\n  })(this, function () {\n    return (/******/function (modules) {\n        // webpackBootstrap\n        /******/ // The module cache\n        /******/\n        var installedModules = {};\n\n        /******/ // The require function\n        /******/\n        function __nested_webpack_require_820__(moduleId) {\n          /******/ // Check if module is in cache\n          /******/if (installedModules[moduleId]) /******/return installedModules[moduleId].exports;\n\n          /******/ // Create a new module (and put it into the cache)\n          /******/\n          var module = installedModules[moduleId] = {\n            /******/exports: {},\n            /******/id: moduleId,\n            /******/loaded: false\n            /******/\n          };\n\n          /******/ // Execute the module function\n          /******/\n          modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_820__);\n\n          /******/ // Flag the module as loaded\n          /******/\n          module.loaded = true;\n\n          /******/ // Return the exports of the module\n          /******/\n          return module.exports;\n          /******/\n        }\n\n        /******/ // expose the modules object (__webpack_modules__)\n        /******/\n        __nested_webpack_require_820__.m = modules;\n\n        /******/ // expose the module cache\n        /******/\n        __nested_webpack_require_820__.c = installedModules;\n\n        /******/ // __webpack_public_path__\n        /******/\n        __nested_webpack_require_820__.p = \"\";\n\n        /******/ // Load entry module and return exports\n        /******/\n        return __nested_webpack_require_820__(0);\n        /******/\n      }\n      /************************************************************************/\n      /******/([/* 0 */\n      /***/function (module, exports, __nested_webpack_require_2312__) {\n        var utils = __nested_webpack_require_2312__(1),\n          _ = __nested_webpack_require_2312__(3),\n          factory = __nested_webpack_require_2312__(4);\n        _.extend(utils, _);\n        module.exports = factory(utils);\n\n        /***/\n      }, /* 1 */\n      /***/function (module, exports, __nested_webpack_require_2600__) {\n        var noop = function () {},\n          defer = window.requestAnimationFrame || window.webkitRequestAnimationFrame || setTimeout,\n          cache = new (__nested_webpack_require_2600__(2))(1000),\n          // priority directives\n          priorities = ['vm', 'repeat', 'if'],\n          _qtid = 0,\n          _slice = [].slice,\n          _alpaca = document.getElementsByTagName('html')[0],\n          slice = function () {\n            try {\n              _slice.call(document.body.childNodes);\n              return _slice;\n            } catch (e) {\n              return function (i) {\n                i = i || 0;\n                var res = [],\n                  l = this.length;\n                for (; i < l; i++) {\n                  res.push(this[i]);\n                }\n                return res;\n              };\n            }\n          }();\n        _alpaca && (_alpaca = _alpaca.getAttribute('alpaca'));\n        function _loopPriority(el, res, setting) {\n          var attr, tmp;\n\n          // TODO need optimization\n          for (var j = 0, l = priorities.length; j < l; j++) {\n            attr = 'q-' + priorities[j];\n            if (tmp = el.getAttribute(attr)) {\n              res.push({\n                name: attr,\n                value: tmp\n              });\n              el.removeAttribute(attr);\n              // has priority directive\n              return true;\n            }\n          }\n        }\n        function walk($el, cb, setting) {\n          setting = setting || {};\n          var i, j, l, el, atts, res, qtid;\n          for (i = 0; el = $el[i++];) {\n            if (el.nodeType === 1) {\n              atts = el.attributes;\n              res = [];\n\n              // loop the priority directive\n              if (!_loopPriority(el, res, setting)) {\n                // loop other directive\n                for (j = 0, l = atts.length; j < l; j++) {\n                  atts[j].name.indexOf('q-') === 0 && res.push({\n                    name: atts[j].name,\n                    value: atts[j].value\n                  });\n                }\n              }\n              res.length > 0 && cb(el, res, setting);\n            }\n            if (el.childNodes.length && !setting.stop) walk(slice.call(el.childNodes, 0), cb, setting);\n            // reset stop\n            setting.stop = false;\n          }\n        }\n        module.exports = {\n          slice: slice,\n          noop: noop,\n          /**\r\n           * Add class with compatibility for IE & SVG\r\n           *\r\n           * @param {Element} el\r\n           * @param {Strong} cls\r\n           */\n          addClass: function (el, cls) {\n            if (el.classList) {\n              el.classList.add(cls);\n            } else {\n              var cur = ' ' + (el.className || '') + ' ';\n              if (cur.indexOf(' ' + cls + ' ') < 0) {\n                el.className = (cur + cls).trim();\n              }\n            }\n          },\n          /**\r\n           * Remove class with compatibility for IE & SVG\r\n           *\r\n           * @param {Element} el\r\n           * @param {Strong} cls\r\n           */\n          removeClass: function (el, cls) {\n            if (el.classList) {\n              el.classList.remove(cls);\n            } else {\n              var cur = ' ' + (el.className || '') + ' ',\n                tar = ' ' + cls + ' ';\n              while (cur.indexOf(tar) >= 0) {\n                cur = cur.replace(tar, ' ');\n              }\n              el.className = cur.trim();\n            }\n          },\n          noexist: function (vm, name) {\n            this.warn(vm);\n            throw new Error('Filter ' + name + ' hasn\\'t implemented.');\n          },\n          warn: function () {\n            return window.console && console.error ? function () {\n              console.error.apply(console, arguments);\n            } : noop;\n          }(),\n          isObject: function (o) {\n            return typeof o === 'object';\n          },\n          nextTick: function (cb, ctx) {\n            return ctx ? defer(function () {\n              cb.call(ctx);\n            }, 0) : defer(cb, 0);\n          },\n          /**\r\n           * get\r\n           * @param {String} namespace\r\n           * @param {String} key\r\n           * @returns {String}\r\n           */\n          get: function (namespace, key) {\n            var arr = [];\n            namespace && arr.push(namespace);\n            key && arr.push(key);\n            return arr.join('.').replace(/^(.+\\.)?\\$top\\./, '');\n          },\n          walk: walk,\n          /**\r\n           * alpaca\r\n           * just a flag\r\n           */\n          alpaca: !!_alpaca\n        };\n\n        /***/\n      }, /* 2 */\n      /***/function (module, exports) {\n        /**\r\n         * just a copy of: https://github.com/yyx990803/vue/blob/master/src/cache.js\r\n         *\r\n         * @param {Number} limit\r\n         * @constructor\r\n         */\n\n        function Cache(limit) {\n          this.size = 0;\n          this.limit = limit;\n          this.head = this.tail = undefined;\n          this._keymap = {};\n        }\n        var p = Cache.prototype;\n\n        /**\r\n         * Put <value> into the cache associated with <key>.\r\n         * Returns the entry which was removed to make room for\r\n         * the new entry. Otherwise undefined is returned.\r\n         * (i.e. if there was enough room already).\r\n         *\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @return {Entry|undefined}\r\n         */\n\n        p.put = function (key, value) {\n          var entry = {\n            key: key,\n            value: value\n          };\n          this._keymap[key] = entry;\n          if (this.tail) {\n            this.tail.newer = entry;\n            entry.older = this.tail;\n          } else {\n            this.head = entry;\n          }\n          this.tail = entry;\n          if (this.size === this.limit) {\n            return this.shift();\n          } else {\n            this.size++;\n          }\n        };\n\n        /**\r\n         * Purge the least recently used (oldest) entry from the\r\n         * cache. Returns the removed entry or undefined if the\r\n         * cache was empty.\r\n         */\n\n        p.shift = function () {\n          var entry = this.head;\n          if (entry) {\n            this.head = this.head.newer;\n            this.head.older = undefined;\n            entry.newer = entry.older = undefined;\n            this._keymap[entry.key] = undefined;\n          }\n          return entry;\n        };\n\n        /**\r\n         * Get and register recent use of <key>. Returns the value\r\n         * associated with <key> or undefined if not in cache.\r\n         *\r\n         * @param {String} key\r\n         * @param {Boolean} returnEntry\r\n         * @return {Entry|*}\r\n         */\n\n        p.get = function (key, returnEntry) {\n          var entry = this._keymap[key];\n          if (entry === undefined) return;\n          if (entry === this.tail) {\n            return returnEntry ? entry : entry.value;\n          }\n          // HEAD--------------TAIL\n          //   <.older   .newer>\n          //  <--- add direction --\n          //   A  B  C  <D>  E\n          if (entry.newer) {\n            if (entry === this.head) {\n              this.head = entry.newer;\n            }\n            entry.newer.older = entry.older; // C <-- E.\n          }\n\n          if (entry.older) {\n            entry.older.newer = entry.newer; // C. --\x3e E\n          }\n\n          entry.newer = undefined; // D --x\n          entry.older = this.tail; // D. --\x3e E\n          if (this.tail) {\n            this.tail.newer = entry; // E. <-- D\n          }\n\n          this.tail = entry;\n          return returnEntry ? entry : entry.value;\n        };\n        module.exports = Cache;\n\n        /***/\n      }, /* 3 */\n      /***/function (module, exports) {\n        var DELEGATOR_CALLBACKS_KEY = '__cbs__',\n          NO_DELEGATOR = {\n            // prevent mouseover trigger more than one time\n            mouseover: true,\n            change: true,\n            input: true,\n            porpertychange: true\n          };\n        var _extend = function (target, srcs) {\n            srcs = [].splice.call(arguments, 1);\n            var i = 0,\n              l = srcs.length,\n              src,\n              key;\n            for (; i < l; i++) {\n              src = srcs[i];\n              for (key in src) {\n                target[key] = src[key];\n              }\n            }\n            return target;\n          },\n          _expando = 'QDataUid',\n          _uid = 0,\n          _map = {};\n        function contains(a, b) {\n          return a !== b && a.contains(b);\n        }\n        function data(el, key, value) {\n          var uid = el[_expando] = el[_expando] || ++_uid,\n            data = _map[uid] = _map[uid] || {};\n          // set Data\n          if (value === undefined) return data[key];\n          return data[key] = value;\n        }\n        function add(el, evt, fn) {\n          evt.split(' ').forEach(function (e) {\n            el.addEventListener(e, fn, false);\n          });\n        }\n        module.exports = {\n          find: function (selector) {\n            return this.slice.call(document.querySelectorAll(selector), 0);\n          },\n          contains: contains,\n          data: data,\n          cleanData: function (els) {\n            var uid;\n            els.forEach(function (el) {\n              var uid = el[_expando];\n              // has data\n              uid && uid in _map && delete _map[uid];\n            });\n          },\n          add: function (el, evt, fn, vm) {\n            if (!vm || NO_DELEGATOR[evt]) {\n              add(el, evt, fn);\n            } else {\n              var $el = vm.$el,\n                cbs = data($el, DELEGATOR_CALLBACKS_KEY);\n              if (!cbs) {\n                cbs = [];\n                data($el, DELEGATOR_CALLBACKS_KEY, cbs);\n                add($el, evt, function (e) {\n                  var target = e.target;\n                  cbs.forEach(function (cb) {\n                    var fn = cb.fn,\n                      el = cb.el;\n                    if (contains(el, target)) {\n                      fn.call(el, e);\n                    }\n                  });\n                });\n              }\n              // push\n              cbs.push({\n                el: el,\n                fn: fn\n              });\n            }\n          },\n          remove: function (el, evt, fn) {\n            el.removeEventListener(evt, fn, false);\n          },\n          clone: function (ele) {\n            return ele.cloneNode(true);\n          },\n          extend: function (target) {\n            if (arguments.length === 1) return _extend(this, target);\n            return _extend.apply(this, arguments);\n          }\n        };\n\n        /***/\n      }, /* 4 */\n      /***/function (module, exports, __nested_webpack_require_13336__) {\n        module.exports = function (_) {\n          var Seed = __nested_webpack_require_13336__(5),\n            events = __nested_webpack_require_13336__(6),\n            MARK = /\\{\\{(.+?)\\}\\}/,\n            mergeOptions = __nested_webpack_require_13336__(7).mergeOptions,\n            clas = __nested_webpack_require_13336__(8),\n            _doc = document;\n          function _inDoc(ele) {\n            return _.contains(_doc.documentElement, ele);\n          }\n\n          // lifecycle: created -> compiled\n\n          /**\r\n           * Q\r\n           * @class\r\n           * @param {Object} options\r\n           */\n          function Q(options) {\n            this._init(options);\n          }\n          // exports utils\n          Q._ = _;\n          Q.options = {\n            directives: __nested_webpack_require_13336__(9),\n            filters: {}\n          };\n          /**\r\n           * get\r\n           * @param {String | Element} selector\r\n           * @return {Q}\r\n           */\n          Q.get = function (selector) {\n            var ele = _.find(selector)[0];\n            if (ele) {\n              return _.data(ele, 'QI');\n            } else {\n              return new this({\n                el: selector\n              });\n            }\n          };\n          /**\r\n           * all\r\n           * @param {Object} options\r\n           */\n          Q.all = function (options) {\n            var self = this;\n            return _.find(options.el).map(function (ele) {\n              return new self(_.extend(options, {\n                el: ele\n              }));\n            });\n          };\n          _.extend(Q, clas);\n          _.extend(Q.prototype, {\n            _init: function (options) {\n              options = options || {};\n              this.$el = options.el && typeof options.el === 'string' ? _.find(options.el)[0] : options.el;\n              // element references\n              this.$$ = {};\n              // set parent vm\n              this.$parent = options._parent;\n              // merge options\n              options = this.$options = mergeOptions(this.constructor.options, options, this);\n              // lifecycle state\n              this._isCompiled = false;\n              this._isAttached = false;\n              this._isReady = false;\n              // events bookkeeping\n              this._events = {};\n              this._watchers = {};\n\n              // components\n              this._children = [];\n              // components references\n              this.$ = {};\n              Seed.call(this, options);\n              // this._data = options.data;\n              // initialize data and scope inheritance.\n              this._initScope();\n              // call created hook\n              this._callHook('created');\n              // start compilation\n              if (this.$el) {\n                // cache the instance\n                _.data(this.$el, 'QI', this);\n                this.$mount(this.$el);\n              }\n            },\n            /**\r\n             * Listen on the given `event` with `fn`.\r\n             *\r\n             * @param {String} event\r\n             * @param {Function} fn\r\n             */\n            $on: function (event, fn) {\n              (this._events[event] || (this._events[event] = [])).push(fn);\n              return this;\n            },\n            /**\r\n             * Adds an `event` listener that will be invoked a single\r\n             * time then automatically removed.\r\n             *\r\n             * @param {String} event\r\n             * @param {Function} fn\r\n             */\n            $once: function (event, fn) {\n              var self = this;\n              function on() {\n                self.$off(event, on);\n                fn.apply(this, arguments);\n              }\n              on.fn = fn;\n              this.$on(event, on);\n              return this;\n            },\n            /**\r\n             * Remove the given callback for `event` or all\r\n             * registered callbacks.\r\n             *\r\n             * @param {String} event\r\n             * @param {Function} fn\r\n             */\n\n            $off: function (event, fn) {\n              var cbs, cb, i;\n              // all event\n              if (!arguments.length) {\n                this._events = {};\n                return this;\n              }\n              // specific event\n              cbs = this._events[event];\n              if (!cbs) {\n                return this;\n              }\n              if (arguments.length === 1) {\n                this._events[event] = null;\n                return this;\n              }\n              // specific handler\n              i = cbs.length;\n              while (i--) {\n                cb = cbs[i];\n                if (cb === fn || cb.fn === fn) {\n                  cbs.splice(i, 1);\n                  break;\n                }\n              }\n              return this;\n            },\n            /**\r\n             * Watch an expression, trigger callback when its\r\n             * value changes.\r\n             *\r\n             * @param {String} exp\r\n             * @param {Function} cb\r\n             * @param {Boolean} [deep]\r\n             * @param {Boolean} [immediate]\r\n             * @return {Function} - unwatchFn\r\n             */\n            $watch: function (exp, cb, deep, immediate) {\n              var key = deep ? exp + '**deep**' : exp;\n              (this._watchers[key] || (this._watchers[key] = [])).push(cb);\n              immediate && cb(this.data(exp));\n              return this;\n            },\n            /**\r\n             * Trigger an event on self.\r\n             *\r\n             * @param {String} e\r\n             */\n            $emit: function (e) {\n              var args = _.slice.call(arguments, 1);\n              events.emit.call(this, e, _.slice.call(args, 0));\n              // emit data change\n              if (!e.indexOf('data:')) {\n                e = e.substring(5);\n                events.callChange.call(this, e, _.slice.call(args, 0));\n              }\n              if (!e.indexOf('deep:')) {\n                e = e.substring(5);\n                events.callDeep.call(this, e, _.slice.call(args, 0));\n                args.unshift(e);\n                events.emit.call(this, 'datachange', args);\n              }\n              return this;\n            },\n            /**\r\n             * Setup the scope of an instance, which contains:\r\n             * - observed data\r\n             * - computed properties\r\n             * - user methods\r\n             * - meta properties\r\n             */\n            _initScope: function () {\n              this._initMethods();\n            },\n            /**\r\n             * Setup instance methods. Methods must be bound to the\r\n             * instance since they might be called by children\r\n             * inheriting them.\r\n             */\n            _initMethods: function () {\n              var methods = this.$options.methods,\n                key;\n              if (methods) {\n                for (key in methods) {\n                  this[key] = methods[key].bind(this);\n                }\n              }\n            },\n            /**\r\n             * Set instance target element and kick off the compilation\r\n             * process. The passed in `el` can be a template string, an\r\n             * existing Element, or a DocumentFragment (for block\r\n             * instances).\r\n             *\r\n             * @param {String|Element|DocumentFragment} el\r\n             * @public\r\n             */\n            $mount: function (el) {\n              if (this._isCompiled) {\n                return _.warn('$mount() should be called only once');\n              }\n              // TODO for template || we may not do for template\n              // if (typeof el === 'string') {\n              //\n              // }\n              this._compile(el);\n              this._isCompiled = true;\n              this._callHook('compiled');\n              if (_inDoc(this.$el)) {\n                this._callHook('attached');\n                this._ready();\n              } else {\n                this.$once('hook:attached', this._ready);\n              }\n            },\n            /**\r\n             * ready\r\n             */\n            _ready: function () {\n              this._isAttached = true;\n              this._isReady = true;\n              this._callHook('ready');\n            },\n            /**\r\n             * Transclude, compile and link element.\r\n             *\r\n             * If a pre-compiled linker is available, that means the\r\n             * passed in element will be pre-transcluded and compiled\r\n             * as well - all we need to do is to call the linker.\r\n             *\r\n             * Otherwise we need to call transclude/compile/link here.\r\n             *\r\n             * @param {Element} el\r\n             * @return {Element}\r\n             */\n            _compile: function (el) {\n              this.transclue(el, this.$options);\n            },\n            /**\r\n             * Process an element or a DocumentFragment based on a\r\n             * instance option object. This allows us to transclude\r\n             * a template node/fragment before the instance is created,\r\n             * so the processed fragment can then be cloned and reused\r\n             * in v-repeat.\r\n             *\r\n             * @param {Element} el\r\n             * @param {Object} options\r\n             */\n            transclue: function (el, options) {\n              // just bind template\n              this._templateBind(el, options);\n            },\n            /**\r\n             * bind rendered template\r\n             */\n            _templateBind: __nested_webpack_require_13336__(11),\n            /**\r\n             * Trigger all handlers for a hook\r\n             *\r\n             * @param {String} hook\r\n             */\n            _callHook: function (hook) {\n              var handlers = this.$options[hook];\n              if (handlers) {\n                for (var i = 0, j = handlers.length; i < j; i++) {\n                  handlers[i].call(this);\n                }\n              }\n              this.$emit('hook:' + hook);\n            },\n            _makeReadFilters: function (names, $this) {\n              if (!names.length) return [];\n              var filters = this.$options.filters,\n                self = this;\n              return names.map(function (args) {\n                args = _.slice.call(args, 0);\n                var name = args.shift();\n                var reader = filters[name] ? filters[name].read || filters[name] : _.noexist(self, name);\n                return function (value, oldVal) {\n                  // don't modify args\n                  var thisArgs = [value].concat(args || []),\n                    i = thisArgs.indexOf('$this');\n                  thisArgs.push(oldVal);\n                  // replace $this\n                  if (~i) {\n                    thisArgs[i] = $this;\n                  }\n                  return args ? reader.apply(self, thisArgs) : reader.call(self, value, oldVal);\n                };\n              });\n            },\n            /**\r\n             * Apply filters to a value\r\n             *\r\n             * @param {*} value\r\n             * @param {Array} filters\r\n             * @param {*} oldVal\r\n             * @return {*}\r\n             */\n            applyFilters: function (value, filters, oldVal) {\n              if (!filters || !filters.length) {\n                return value;\n              }\n              for (var i = 0, l = filters.length; i < l; i++) {\n                value = filters[i].call(this, value, oldVal);\n              }\n              return value;\n            }\n          });\n          _.extend(Q.prototype, Seed.prototype);\n          return Q;\n        };\n\n        /***/\n      }, /* 5 */\n      /***/function (module, exports, __nested_webpack_require_25008__) {\n        var _ = __nested_webpack_require_25008__(1);\n\n        /**\r\n         * prefix data\r\n         * @param {Data || DataArray} up\r\n         * @param {String} key\r\n         * @param {*} value\r\n         * @param {Boolean} trigger or not\r\n         */\n        function _prefix(up, key, value, trigger) {\n          var top = up._top,\n            isArray = _isArray(value),\n            options = {\n              data: value,\n              up: up,\n              top: top,\n              namespace: key + '',\n              trigger: isArray ? false : trigger\n            },\n            // old value\n            oldVal = top.data ? top.data(up.$namespace(key)) : undefined;\n          if (typeof value === 'object' && value !== null) {\n            up[key] = isArray ? new DataArray(options) : new Data(options);\n\n            // trigger data change\n            trigger && up.$change(up.$namespace(key), up[key], oldVal);\n          } else if (oldVal !== value) {\n            up[key] = value;\n            // trigger data change\n            trigger && up.$change(up.$namespace(key), value, oldVal);\n          }\n          if (!~up._keys.indexOf(key)) up._keys.push(key);\n        }\n        function _isArray(obj) {\n          return Array.isArray(obj) || obj instanceof DataArray;\n        }\n        function _getLength(keys) {\n          return keys.filter(function (key) {\n            return typeof key === 'number';\n          }).length;\n        }\n\n        /**\r\n         * Data\r\n         * @class\r\n         * @param {Object} options\r\n         */\n        function Data(options) {\n          var data = options.data,\n            keys = Object.keys(options.data || {}).filter(function (key) {\n              return key.indexOf('_') !== 0;\n            }).map(function (num) {\n              return +num + '' === num ? +num : num;\n            }),\n            self = this;\n          _.extend(this, data);\n\n          // all key need to traverse\n          this._keys = keys;\n          // parent data container\n          this._up = options.up;\n          // the most top parent data container\n          this._top = options.top || this;\n          // the namespace of data\n          this._namespace = options.namespace || '';\n          keys.forEach(function (key) {\n            _prefix(self, key, data[key], options.trigger);\n          });\n          // if it is a array\n          _isArray(data) && (\n          // fix the length\n          this.length = _getLength(keys));\n        }\n        _.extend(Data.prototype, {\n          /**\r\n           * get the namespace\r\n           */\n          $namespace: function (key) {\n            var keys = [],\n              self = this;\n            for (; self != undefined; self = self._up) {\n              self._namespace && keys.unshift(self._namespace);\n            }\n            if (key) keys.push(key);\n            return keys.join('.');\n          },\n          /**\r\n           * get the key of it's parent\r\n           */\n          $key: function () {\n            var key = this._namespace;\n            return +key + '' === key ? +key : key;\n          },\n          /**\r\n           * get the parent of the data\r\n           */\n          $up: function (num) {\n            num = num || 1;\n            for (var src = this; num--;) {\n              src = src['_up'];\n            }\n            return src;\n          },\n          /**\r\n           * set the value of the key\r\n           */\n          $set: function (key, value) {\n            if (typeof key === 'object') {\n              var self = this;\n              Object.keys(key).filter(function (k) {\n                return k.indexOf('_') !== 0;\n              }).forEach(function (k) {\n                _prefix(self, k, key[k], true);\n              });\n              this.$change(this.$namespace(key), this, undefined, 1);\n            } else {\n              var oldValue = this[key];\n              _prefix(this, key, value, true);\n              // just bubble\n              this.$change(this.$namespace(key), this[key], oldValue, undefined, -1);\n            }\n            return this;\n          },\n          /**\r\n           * get the actual value\r\n           */\n          $get: function () {\n            var res,\n              keys = this._keys,\n              self = this;\n            if (this instanceof Data) {\n              res = {};\n            } else {\n              res = [];\n            }\n            keys.forEach(function (key) {\n              res[key] = self[key] == null ? self[key] : self[key].$get ? self[key].$get() : self[key];\n            });\n            return res;\n          },\n          /**\r\n           * change\r\n           * type = 0 just change\r\n           * type = 1 trigger change & deep\r\n           * type = -1 just deep\r\n           */\n          $change: function (key, value, oldVal, patch, type) {\n            type = type || 0;\n            var top = this._top;\n            if (top.$emit) {\n              ~type && this._top.$emit('data:' + key, value, oldVal, patch);\n              type && this._top.$emit('deep:' + key, value, oldVal, patch);\n            }\n          }\n        });\n\n        /**\r\n         * DataArray\r\n         * Something just like Array\r\n         * @class\r\n         * @param {Object} options\r\n         */\n        function DataArray(options) {\n          Data.call(this, options);\n        }\n        _.extend(DataArray.prototype, Data.prototype, {\n          /**\r\n           * push data\r\n           */\n          push: function (values) {\n            values = _.slice.call(arguments, 0);\n            var res = [];\n            for (var i = 0, l = values.length; i < l; i++) {\n              _prefix(this, this.length, values[i]);\n              this._keys.push(this.length);\n              res.push(this[this.length]);\n              this.length++;\n            }\n            // value, oldValue, patch\n            this.$change(this.$namespace(), this, null, {\n              method: 'push',\n              res: res,\n              args: values\n            }, 1);\n            return this;\n          },\n          /**\r\n           * pop data\r\n           */\n          pop: function () {\n            var res = this[--this.length];\n            delete this[this.length];\n            this._keys.pop();\n            this.$change(this.$namespace(), this, null, undefined, 1);\n            return res;\n          },\n          /**\r\n           * unshift\r\n           */\n          unshift: function (value) {\n            this._keys.push(this.length);\n            this.length++;\n            for (var l = this.length; l--;) {\n              this[l] = this[l - 1];\n              // fixed namespace\n              typeof this[l] === 'object' && (this[l]._namespace = l + '');\n            }\n            _prefix(this, 0, value);\n            this.$change(this.$namespace(), this, null, undefined, 1);\n            return this;\n          },\n          /**\r\n           * shift\r\n           */\n          shift: function () {\n            this.length--;\n            var res = this[0];\n            for (var i = 0, l = this.length; i < l; i++) {\n              this[i] = this[i + 1];\n              // fixed namespace\n              typeof this[i] === 'object' && (this[i]._namespace = i + '');\n            }\n            this._keys.pop();\n            delete this[this.length];\n            this.$change(this.$namespace(), this, null, undefined, 1);\n            return res;\n          },\n          /**\r\n           * touch\r\n           */\n          touch: function (key) {\n            this.$change(this.$namespace(key), this, null, undefined, 1);\n          },\n          /**\r\n           * indexOf\r\n           */\n          indexOf: function (item) {\n            if (item._up === this) {\n              var i = +item._namespace;\n              if (this[i] === item) return i;\n            } else if (typeof item !== 'object') {\n              for (var i = 0, l = this.length; i < l; i++) {\n                if (this[i] === item) return i;\n              }\n            }\n            return -1;\n          },\n          /**\r\n           * splice\r\n           */\n          splice: function (i, l /**, items support later **/) {\n            var patch = {\n              method: 'splice',\n              args: [i, l]\n            };\n            for (var j = 0, k = l + i, z = this.length - l; i < z; i++, j++) {\n              this[i] = this[k + j];\n              typeof this[i] === 'object' && (this[i]._namespace = i + '');\n            }\n            for (; i < this.length; i++) {\n              this[i] = null;\n              delete this[i];\n            }\n            this.length -= l;\n            this._keys.splice(this.length, l);\n            this.$change(this.$namespace(), this, null, patch, 1);\n          },\n          /**\r\n           * forEach\r\n           */\n          forEach: function (foo) {\n            for (var i = 0, l = this.length; i < l; i++) {\n              foo(this[i], i);\n            }\n          },\n          /**\r\n           * filter\r\n           */\n          filter: function (foo) {\n            var res = [];\n            this.forEach(function (item, i) {\n              if (foo(item)) res.push(item);\n            });\n            return res;\n          }\n        });\n\n        /**\r\n         * Seed\r\n         * @param {Object} options\r\n         */\n        function Seed(options) {\n          Data.call(this, options);\n        }\n        _.extend(Seed, {\n          Data: Data,\n          DataArray: DataArray\n        });\n        _.extend(Seed.prototype, Data.prototype, {\n          /**\r\n           * Set data and Element value\r\n           *\r\n           * @param {String} key\r\n           * @param {*} value\r\n           * @returns {Data}\r\n           */\n          data: function (key, value) {\n            if (key === undefined) return this;\n            var i = 0,\n              l,\n              data = this,\n              next;\n            if (~key.indexOf('.')) {\n              var keys = key.split('.');\n              for (l = keys.length; i < l - 1; i++) {\n                key = keys[i];\n                // key is number\n                if (+key + '' === key) key = +key;\n                if (key in data && data[key] != null) {\n                  data = data[key];\n                } else if (value === undefined) {\n                  // data is undefind\n                  return undefined;\n                } else {\n                  next = keys[i + 1];\n                  // next is number\n                  if (+next + '' == next) {\n                    // set a array\n                    _prefix(data, key, [], true);\n                  } else {\n                    // set a object\n                    _prefix(data, key, {}, true);\n                  }\n                }\n              }\n            }\n            l && (key = keys[i]);\n            // if data === undefined, just return\n            if (value === undefined) return data && key ? data[key] : data;\n            data.$set(key, value);\n            return data[key];\n          }\n        });\n        module.exports = Seed;\n\n        /***/\n      }, /* 6 */\n      /***/function (module, exports, __nested_webpack_require_35987__) {\n        var Data = __nested_webpack_require_35987__(5),\n          _ = __nested_webpack_require_35987__(1);\n        function emit(key, args, target) {\n          // set the trigger target is pass in or this\n          target = target || this;\n          var cbs = this._events[key];\n          if (cbs) {\n            var i = 0;\n            cbs = cbs.length > 1 ? _.slice.call(cbs, 0) : cbs;\n            for (var l = cbs.length; i < l; i++) {\n              cbs[i].apply(target, args);\n            }\n          }\n          // emit parent\n          // prevent data: event and hook: event trigger\n          if (key.indexOf('data:') && key.indexOf('hook:') && key.indexOf('deep:') && this.$parent) {\n            emit.call(this.$parent, key, args, target);\n          }\n        }\n        function callChange(key, args) {\n          var self = {\n            _events: this._watchers\n          };\n          emit.call(self, key, args);\n          emit.call(self, key + '**deep**', args);\n        }\n        function callDeep(key, args) {\n          var props,\n            nArgs,\n            keys = key.split('.'),\n            self = {\n              _events: this._watchers\n            };\n          for (keys.pop(); keys.length > 0; keys.pop()) {\n            key = keys.join('.');\n            props = key + '**deep**';\n            // remove the old value\n            emit.call(self, props, [this.data(key)]);\n          }\n          // emit vm is change\n          emit.call(self, '**deep**', [this]);\n        }\n        module.exports = {\n          emit: emit,\n          callChange: callChange,\n          callDeep: callDeep\n        };\n\n        /***/\n      }, /* 7 */\n      /***/function (module, exports, __nested_webpack_require_37664__) {\n        var _ = __nested_webpack_require_37664__(1);\n        var strats = {};\n        strats.created = strats.ready = strats.attached = strats.detached = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.paramAttributes = function (parentVal, childVal) {\n          return childVal ? parentVal ? parentVal.concat(childVal) : Array.isArray(childVal) ? childVal : [childVal] : parentVal;\n        };\n        strats.data = strats.filters = strats.methods = strats.directives = function (parentVal, childVal) {\n          if (!childVal) return parentVal;\n          if (!parentVal) return childVal;\n          return _.extend({}, parentVal, childVal);\n        };\n        var defaultStrat = function (parentVal, childVal) {\n          return childVal === undefined ? parentVal : childVal;\n        };\n\n        /**\r\n         * Option overwriting strategies are functions that handle\r\n         * how to merge a parent option value and a child option\r\n         * value into the final value.\r\n         *\r\n         * All strategy functions follow the same signature:\r\n         *\r\n         * @param {*} parentVal\r\n         * @param {*} childVal\r\n         * @param {Vue} [vm]\r\n         */\n        function mergeOptions(parent, child, vm) {\n          var options = {},\n            key;\n          for (key in parent) {\n            merge(key);\n          }\n          for (key in child) {\n            if (!parent.hasOwnProperty(key)) {\n              merge(key);\n            }\n          }\n          function merge(key) {\n            var strat = strats[key] || defaultStrat;\n            options[key] = strat(parent[key], child[key], vm, key);\n          }\n          return options;\n        }\n        module.exports = {\n          strats: strats,\n          mergeOptions: mergeOptions\n        };\n\n        /***/\n      }, /* 8 */\n      /***/function (module, exports, __nested_webpack_require_39527__) {\n        // Modules map\n        var modules = {},\n          mergeOptions = __nested_webpack_require_39527__(7).mergeOptions,\n          listeners = {};\n        function _define(name, options) {\n          if (modules[name]) return false;\n          var module = modules[name] = this.extend(options || {});\n          return module;\n        }\n        function _require(name, callback) {\n          return modules[name] || this;\n        }\n        function _create(o) {\n          function F() {}\n          F.prototype = o;\n          return new F();\n        }\n        function _extend(extendOptions) {\n          extendOptions = extendOptions || {};\n          var Super = this,\n            Sub = createClass(extendOptions.name || 'QComponent');\n          Sub.prototype = _create(Super.prototype);\n          Sub.prototype.constructor = Sub;\n          Sub.options = mergeOptions(Super.options, extendOptions);\n          Sub['super'] = Super;\n          ['extend', 'get', 'all', 'require', 'define'].forEach(function (key) {\n            Sub[key] = Super[key];\n          });\n          return Sub;\n        }\n        function createClass(name) {\n          return new Function('return function ' + name + ' (options) { this._init(options) }')();\n        }\n        module.exports = {\n          /**\r\n           * define\r\n           * define a component\r\n           * @param {String} name\r\n           * @param {Object} options\r\n           */\n          define: _define,\n          /**\r\n           * require\r\n           * require(name)\r\n           * require(names, callback)\r\n           * require a component\r\n           * @param {String} name\r\n           * @param {Array} names\r\n           * @param {Function} callback\r\n           */\n          require: _require,\n          /**\r\n           * extend\r\n           * extend the class\r\n           * @param {Object} options\r\n           */\n          extend: _extend\n        };\n\n        /***/\n      }, /* 9 */\n      /***/function (module, exports, __nested_webpack_require_41502__) {\n        var _ = __nested_webpack_require_41502__(1),\n          strats = __nested_webpack_require_41502__(7);\n        var PROP_REG = /^(.*)\\.([\\w\\-]+)$/;\n        module.exports = {\n          cloak: {\n            bind: function () {\n              var vm = this.vm,\n                el = this.el;\n\n              // after ready\n              vm.$once('hook:ready', function () {\n                // if data change\n                vm.$once('datachange', function () {\n                  el.removeAttribute('q-cloak');\n                });\n              });\n            }\n          },\n          show: function (value) {\n            var el = this.el;\n            if (value) {\n              el.style.display = '';\n              var display = el.currentStyle ? el.currentStyle.display : getComputedStyle(el, null).display;\n              if (display === 'none') {\n                el.style.display = 'block';\n              }\n            } else {\n              el.style.display = 'none';\n            }\n          },\n          'class': function (value) {\n            var el = this.el,\n              arg = this.arg;\n            if (arg) {\n              value ? _.addClass(el, arg) : _.removeClass(el, arg);\n            } else {\n              if (this.lastVal) {\n                _.removeClass(el, this.lastVal);\n              }\n              if (value) {\n                _.addClass(el, value);\n                this.lastVal = value;\n              }\n            }\n          },\n          value: function (value) {\n            var el = this.el;\n            if (el.type === 'checkbox') {\n              el.checked = value;\n            } else {\n              el.value = value;\n            }\n          },\n          attr: function (value) {\n            if (value === undefined) return;\n            var arg = this.arg,\n              el = this.el;\n            // property\n            if (arg === 'style') {\n              if (typeof value === 'object') {\n                for (var k in value) {\n                  if (value.hasOwnProperty(k)) {\n                    el.style[k] = value[k];\n                  }\n                }\n              } else {\n                el.setAttribute(arg, value);\n              }\n            } else {\n              if (arg in el) {\n                el[arg] = value;\n              } else {\n                el.setAttribute(arg, value);\n              }\n            }\n          },\n          text: function (value) {\n            var text;\n            value !== undefined && (text = typeof this.el.textContent === 'string' ? 'textContent' : 'innerText') && (this.el[text] = value == null ? '' : value.toString());\n          },\n          html: function (value) {\n            this.el.innerHTML = value && value.toString() || '';\n          },\n          on: {\n            bind: function () {\n              var self = this,\n                key = this.target,\n                param = this.param,\n                filters = this.filters,\n                vm = this.vm,\n                handler = vm.applyFilters(this.vm[key], filters),\n                data = param && ~param.indexOf('this') && self.data();\n              _.add(this.el, this.arg, function (e) {\n                if (!handler || typeof handler !== 'function') {\n                  return _.warn('You need implement the ' + key + ' method.');\n                }\n                var args = [];\n                param ? param.forEach(function (arg) {\n                  if (arg === 'e') args.push(e);else if (arg === 'this') args.push(data);else if (arg === 'true') args.push(true);else if (arg === 'false') args.push(false);else if (+arg + '' === arg) args.push(+arg);else if (arg.match(/^(['\"]).*\\1$/)) args.push(arg.slice(1, -1));else args.push(self.data(arg));\n                }) : args.push(e);\n                handler.apply(vm, args);\n              });\n            }\n          },\n          model: {\n            bind: function () {\n              var keys = ((this.namespace ? this.namespace + '.' : '') + this.target).split('.'),\n                key = keys.pop(),\n                namespace = keys.join('.'),\n                el = this.el,\n                vm = this.vm,\n                data = vm.data(namespace),\n                composing = false;\n              _.add(el, 'input propertychange change keypress keyup', function (e) {\n                if (composing) return;\n                data.$set(key, el.value);\n              });\n              _.add(el, 'compositionstart', function (e) {\n                composing = true;\n              });\n              _.add(el, 'compositionend', function (e) {\n                composing = false;\n              });\n            },\n            update: function (value) {\n              if (this.el.value !== value) {\n                this.el.value = value;\n              }\n            }\n          },\n          vm: {\n            bind: function () {\n              // stop walk\n              this.setting.stop = true;\n\n              // which component\n              var name = this.target,\n                vm = this.vm,\n                el = this.el,\n                // component reference\n                ref = el.getAttribute('q-ref') || false,\n                Child = vm.constructor.require(name),\n                data = Child.options.data,\n                options,\n                childVm;\n              options = {\n                el: el,\n                data: data,\n                _parent: vm\n              };\n              childVm = new Child(options);\n              vm._children.push(childVm);\n              ref && !function () {\n                var refs = vm.$[ref];\n                refs ? refs.length ? refs.push(childVm) : vm.$[ref] = [refs, childVm] : vm.$[ref] = childVm;\n              }();\n            }\n          },\n          'if': {\n            bind: function () {\n              // return if el is a template\n              if (!this.el.parentNode) return;\n              var tpl = this.el,\n                parentNode = tpl.parentNode,\n                ref = document.createComment('q-if'),\n                hasInit = false,\n                exist = true,\n                key = this.target,\n                namespace = this.namespace,\n                target = _.get(namespace, key),\n                readFilters = this.filters,\n                data = this.data(),\n                vm = this.vm;\n              this.setting.stop = true;\n              function _init(value) {\n                // no exist no bind\n                if (hasInit || !exist || !value) return;\n                hasInit = true;\n                vm._templateBind(tpl, {\n                  data: data,\n                  namespace: namespace,\n                  immediate: true\n                });\n              }\n              vm.$watch(target, function (value, oldVal) {\n                value = vm.applyFilters(value, readFilters, oldVal);\n                _init(value);\n                // need to init\n                if (value === exist) return;\n                // bind\n                if (value === true) {\n                  parentNode.replaceChild(tpl, ref);\n                  exist = value;\n                  // unbind\n                } else if (value === false) {\n                  parentNode.replaceChild(ref, tpl);\n                  exist = value;\n                }\n                _init(value);\n              }, typeof this.data(key) === 'object', true);\n            }\n          },\n          el: {\n            bind: function () {\n              this.vm.$$[this.target] = this.el;\n            }\n          },\n          repeat: __nested_webpack_require_41502__(10)\n        };\n\n        /***/\n      }, /* 10 */\n      /***/function (module, exports, __nested_webpack_require_49083__) {\n        var _ = __nested_webpack_require_49083__(1);\n        var methods = {\n          'default': {\n            // how to clean the dom\n            clean: function (parentNode, repeats) {\n              if (repeats.length) {\n                repeats.forEach(function (node) {\n                  // repeat element may has been remove\n                  node.parentNode === parentNode && parentNode.removeChild(node);\n                });\n                _.cleanData(repeats);\n                repeats.length = 0;\n              }\n            },\n            insert: function (parentNode, fragment, ref) {\n              parentNode.insertBefore(fragment, ref);\n            }\n          },\n          push: {\n            insert: function (parentNode, fragment, ref) {\n              parentNode.insertBefore(fragment, ref);\n            },\n            dp: function (data, patch) {\n              return patch.res;\n            }\n          },\n          splice: {\n            clean: function (parentNode, repeats, value, watchers) {\n              var i = value[0],\n                l = value[1],\n                target = value[2].$namespace(),\n                eles = repeats.splice(i, l);\n              eles.forEach(function (ele) {\n                parentNode.removeChild(ele);\n              });\n              // just splice one time\n              if (!value.done) {\n                splice(watchers, target, i, l);\n                value.done = true;\n              }\n              return true;\n            },\n            dp: function (data, patch) {\n              patch.args.push(data);\n              return patch.args;\n            }\n          }\n        };\n        function splice(watchers, target, i, l) {\n          var length = target.length,\n            subKey,\n            cur,\n            index,\n            newKey;\n          Object.keys(watchers).forEach(function (key) {\n            if (~key.indexOf(target)) {\n              subKey = key.substring(length + 1);\n              cur = subKey.split('.');\n              if (cur.length) {\n                index = +cur.shift();\n                if ((index -= l) >= i) {\n                  cur.unshift(index);\n                  cur.unshift(target);\n                  newKey = cur.join('.');\n                  watchers[newKey] = watchers[key];\n                  delete watchers[key];\n                }\n              }\n            }\n          });\n        }\n        exports.bind = function () {\n          var tpl = this.el,\n            setting = this.setting,\n            parentNode = tpl.parentNode,\n            key,\n            namespace,\n            target,\n            readFilters,\n            repeats,\n            ref,\n            vm;\n          // return\n          if (!parentNode || setting.stop) return;\n\n          // stop binding\n          setting.stop = true;\n          key = this.target;\n          namespace = this.namespace;\n          target = _.get(namespace, key);\n          readFilters = this.filters;\n          repeats = [];\n          ref = document.createComment('q-repeat');\n          vm = this.vm;\n          parentNode.replaceChild(ref, tpl);\n          vm.$watch(target, function (value, oldVal, patch) {\n            value = vm.applyFilters(value, readFilters);\n            // if value is undefined or null just return\n            if (value == null) return;\n            var method = !readFilters.length && patch ? patch.method : 'default',\n              dp = (methods[method] || {}).dp,\n              clean = (methods[method] || {}).clean,\n              insert = (methods[method] || {}).insert;\n\n            // if dp exists, proceess data\n            dp && (value = dp(value, patch));\n            if (clean && clean(parentNode, repeats, value, vm._watchers, target) === true) {\n              return;\n            }\n            var fragment = document.createDocumentFragment(),\n              itemNode;\n            value.forEach(function (obj, i) {\n              itemNode = _.clone(tpl);\n              vm._templateBind(itemNode, {\n                data: obj,\n                namespace: obj.$namespace(),\n                immediate: true\n              });\n              // TODO this must refactor\n              repeats.push(itemNode);\n              fragment.appendChild(itemNode);\n            });\n            insert && insert(parentNode, fragment, ref);\n            vm.$emit('repeat-render');\n          }, false, true);\n        };\n\n        /***/\n      }, /* 11 */\n      /***/function (module, exports, __nested_webpack_require_53527__) {\n        var parse = __nested_webpack_require_53527__(12),\n          _ = __nested_webpack_require_53527__(1);\n        module.exports = function (el, options) {\n          options = options || {};\n          var self = this,\n            directives = self.$options.directives,\n            index = options.index,\n            data = options.data || self,\n            namespace = options.namespace;\n          _.walk([el], function (node, res, setting) {\n            res.forEach(function (obj) {\n              var name = obj.name.substring(2),\n                directive = directives[name],\n                descriptors = parse(obj.value);\n              directive && descriptors.forEach(function (descriptor) {\n                var readFilters = self._makeReadFilters(descriptor.filters, self.data(namespace)),\n                  key = descriptor.target,\n                  target = _.get(namespace, key),\n                  update = _.isObject(directive) ? directive.update : directive,\n                  that = _.extend({\n                    el: node,\n                    vm: self,\n                    data: function (key) {\n                      return self.data(_.get(namespace, key));\n                    },\n                    namespace: namespace,\n                    setting: setting\n                  }, descriptor, {\n                    filters: readFilters\n                  }),\n                  tmp = that.data(key);\n                update && self.$watch(target, function (value, oldValue) {\n                  value = self.applyFilters(value, readFilters, oldValue);\n                  update.call(that, value, oldValue);\n                }, typeof tmp === 'object', _.alpaca ? false : typeof options.immediate === 'boolean' ? options.immediate : tmp !== undefined);\n                if (_.isObject(directive) && directive.bind) directive.bind.call(that);\n              });\n            });\n          });\n        };\n\n        /***/\n      }, /* 12 */\n      /***/function (module, exports, __nested_webpack_require_55505__) {\n        var cache = new (__nested_webpack_require_55505__(2))(1000),\n          tokens = [\n          // space\n          [/^ +/],\n          // arg\n          [/^([\\w\\-]+):/, function (captures, status) {\n            status.token.arg = captures[1];\n          }],\n          // function\n          [/^([\\w]+)\\((.+?)\\)/, function (captures, status) {\n            status.token.target = captures[1];\n            status.token.param = captures[2].split(/ *, */);\n          }],\n          // target\n          [/^([\\w\\-\\.\\$]+)/, function (captures, status) {\n            status.token.target = captures[1];\n          }],\n          // filter\n          [/^(?=\\|)/, function (captures, status) {\n            status.filter = true;\n          }],\n          // next\n          [/^,/, function (captures, status, res) {\n            res.push(status.token);\n            status.token = {\n              filters: []\n            };\n          }]],\n          filterREG = /^(.+?)(?=,|$)/,\n          filterTokens = [\n          // space\n          [/^ +/],\n          // filter\n          [/^\\| *([\\w\\-\\!]+)/, function (captures, filters) {\n            filters.push([captures[1]]);\n          }],\n          // string\n          [/^(['\"])(((\\\\['\"])?([^\\1])*)+)\\1/, function (captures, filters) {\n            filters[filters.length - 1].push(captures[3]);\n          }],\n          // arg\n          [/^([\\w\\-\\$]+)/, function (captures, filters) {\n            filters[filters.length - 1].push(captures[1]);\n          }]];\n        /**\r\n         * click: onclick | filter1 | filter2\r\n         * click: onclick , keydown: onkeydown\r\n         * click: onclick(this)\r\n         * click: onclick(e, this)\r\n         * value1 | filter1 | filter2\r\n         * value - 1 | filter1 | filter2   don't support\r\n         */\n        function parse(str) {\n          var name = str,\n            hit = cache.get(name);\n          if (hit) return hit;\n          var res = [],\n            captures,\n            i,\n            l = tokens.length,\n            foo,\n            // if has token or not\n            has = false,\n            status = {\n              // if in filter or not\n              filter: false,\n              // just token object\n              token: {\n                filters: []\n              }\n            };\n          while (str.length) {\n            for (i = 0; i < l; i++) {\n              if (captures = tokens[i][0].exec(str)) {\n                var has = true;\n                var foo = tokens[i][1];\n                foo && foo(captures, status, res);\n                str = str.replace(tokens[i][0], '');\n                if (status.filter) {\n                  captures = filterREG.exec(str);\n                  parseFilter(captures[0].trim(), status.token);\n                  str = str.replace(filterREG, '');\n                  status.filter = false;\n                }\n                break;\n              }\n            }\n            if (has) {\n              has = false;\n            } else {\n              throw new Error('Syntax error at: ' + str);\n            }\n          }\n          res.push(status.token);\n          cache.put(name, res);\n          return res;\n        }\n        function parseFilter(str, token) {\n          var i,\n            l = filterTokens.length,\n            has = false;\n          while (str.length) {\n            for (i = 0; i < l; i++) {\n              var captures = filterTokens[i][0].exec(str);\n              if (captures) {\n                var has = true;\n                var foo = filterTokens[i][1];\n                foo && foo(captures, token.filters);\n                str = str.replace(filterTokens[i][0], '');\n                break;\n              }\n            }\n            if (has) {\n              has = false;\n            } else {\n              throw new Error('Syntax error at: ' + str);\n            }\n          }\n        }\n        module.exports = parse;\n\n        /***/\n      }\n      /******/])\n    );\n  });\n\n  ;\n}).call(module.exports);\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source-src/js/Q.js\n")},"./source-src/js/anm.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar module = {\n  exports: {}\n};\nvar exports = module.exports;\nfunction init() {\n  var width,\n    height,\n    largeHeader,\n    canvas,\n    ctx,\n    circles,\n    target,\n    animateHeader = true;\n  let obj = {};\n\n  // Main\n  initHeader();\n  addListeners();\n  function initHeader() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    target = {\n      x: 0,\n      y: height\n    };\n    largeHeader = document.getElementById('container');\n    largeHeader.style.height = height + 'px';\n    canvas = document.getElementById('anm-canvas');\n    canvas.width = width;\n    canvas.height = height;\n    ctx = canvas.getContext('2d');\n\n    // create particles\n    circles = [];\n    for (var x = 0; x < width * 0.5; x++) {\n      var c = new Circle();\n      circles.push(c);\n    }\n    animate();\n  }\n  function scrollToc() {\n    if (document.querySelector('#toc')) {\n      let titles = Array.from(document.querySelectorAll('article h1,article h2,article h3,article h4,article h5,article h6'));\n      // 全屏滚动条出自container元素\n      let scrollTop = document.querySelector('#container').scrollTop;\n      let matchTitle = titles.find(title => scrollTop <= title.offsetTop + 31);\n      matchTitle = matchTitle && matchTitle.innerText;\n\n      // 左侧导航栏\n      let tocs = Array.from(document.querySelectorAll('#toc .toc-text'));\n      let matchToc = tocs.find(toc => toc.innerText === matchTitle);\n      if (matchToc) {\n        let parentNode = matchToc.parentNode;\n        tocs.forEach(toc => toc.parentNode.classList.remove(\"toc-link-active\"));\n        parentNode.classList.add(\"toc-link-active\");\n        let currentTop = document.querySelector('.left-col').scrollTop;\n        obj.currentTop = currentTop;\n        obj.activeOffsetTop = parentNode.offsetTop;\n        if (!window.req && obj.currentTop !== obj.activeOffsetTop) {\n          requestAnimationFrame(scrollToToc.bind(obj));\n          window.req = true;\n        }\n      }\n    }\n  }\n  function scrollToToc() {\n    let currentTop = document.querySelector('.left-col').scrollTop;\n    let diff = this.activeOffsetTop - this.currentTop;\n    let targetPosition = diff > 0 ? Math.min(currentTop + diff / 10, this.activeOffsetTop) : Math.max(currentTop + diff / 10, this.activeOffsetTop);\n    // document.querySelector('.left-col').scrollTo(0, targetPosition);\n    // 兼容edge\n    document.querySelector('.left-col').scrollTop = targetPosition;\n    // 最大滚动的距离\n    let maxHeight = document.querySelector('.left-col').scrollHeight - document.querySelector('.left-col').offsetHeight;\n\n    // targetPosition < maxHeight -> 超过滚动距离停止动画\n    if (targetPosition !== this.activeOffsetTop && targetPosition < maxHeight) {\n      requestAnimationFrame(scrollToToc.bind(this));\n    } else {\n      window.req = false;\n    }\n  }\n\n  // Event handling\n  function addListeners() {\n    window.addEventListener('scroll', scrollCheck);\n    document.querySelector('#container').addEventListener('scroll', scrollToc);\n    window.addEventListener('resize', resize);\n  }\n  function scrollCheck() {\n    if (document.body.scrollTop > height) animateHeader = false;else animateHeader = true;\n  }\n  function resize() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    largeHeader.style.height = height + 'px';\n    canvas.width = width;\n    canvas.height = height;\n  }\n  function animate() {\n    if (animateHeader) {\n      ctx.clearRect(0, 0, width, height);\n      for (var i in circles) {\n        circles[i].draw();\n      }\n    }\n    requestAnimationFrame(animate);\n  }\n\n  // Canvas manipulation\n  function Circle() {\n    var _this = this;\n\n    // constructor\n    (function () {\n      _this.pos = {};\n      init();\n      //console.log(_this);\n    })();\n\n    function init() {\n      _this.pos.x = Math.random() * width;\n      _this.pos.y = height + Math.random() * 100;\n      _this.alpha = 0.1 + Math.random() * 0.3;\n      _this.scale = 0.1 + Math.random() * 0.3;\n      _this.velocity = Math.random();\n    }\n    this.draw = function () {\n      if (_this.alpha <= 0) {\n        init();\n      }\n      _this.pos.y -= _this.velocity;\n      _this.alpha -= 0.0005;\n      ctx.beginPath();\n      ctx.arc(_this.pos.x, _this.pos.y, _this.scale * 10, 0, 2 * Math.PI, false);\n      ctx.fillStyle = 'rgba(255,255,255,' + _this.alpha + ')';\n      ctx.fill();\n    };\n  }\n}\nmodule.exports = {\n  init: init\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zb3VyY2Utc3JjL2pzL2FubS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4by10aGVtZS1sdWNreXNoaXAvLi9zb3VyY2Utc3JjL2pzL2FubS5qcz84NmVlIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgdmFyIHdpZHRoLCBoZWlnaHQsIGxhcmdlSGVhZGVyLCBjYW52YXMsIGN0eCwgY2lyY2xlcywgdGFyZ2V0LCBhbmltYXRlSGVhZGVyID0gdHJ1ZTtcclxuICBsZXQgb2JqID0ge307XHJcblxyXG4gIC8vIE1haW5cclxuICBpbml0SGVhZGVyKCk7XHJcbiAgYWRkTGlzdGVuZXJzKCk7XHJcblxyXG4gIGZ1bmN0aW9uIGluaXRIZWFkZXIoKSB7XHJcbiAgICB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgdGFyZ2V0ID0ge1xyXG4gICAgICB4OiAwLFxyXG4gICAgICB5OiBoZWlnaHRcclxuICAgIH07XHJcblxyXG4gICAgbGFyZ2VIZWFkZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29udGFpbmVyJyk7XHJcbiAgICBsYXJnZUhlYWRlci5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xyXG5cclxuICAgIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhbm0tY2FudmFzJyk7XHJcbiAgICBjYW52YXMud2lkdGggPSB3aWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAvLyBjcmVhdGUgcGFydGljbGVzXHJcbiAgICBjaXJjbGVzID0gW107XHJcbiAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHdpZHRoICogMC41OyB4KyspIHtcclxuICAgICAgdmFyIGMgPSBuZXcgQ2lyY2xlKCk7XHJcbiAgICAgIGNpcmNsZXMucHVzaChjKTtcclxuICAgIH1cclxuICAgIGFuaW1hdGUoKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHNjcm9sbFRvYygpIHtcclxuICAgIGlmIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjdG9jJykpIHtcclxuICAgICAgbGV0IHRpdGxlcyA9IEFycmF5LmZyb20oZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYXJ0aWNsZSBoMSxhcnRpY2xlIGgyLGFydGljbGUgaDMsYXJ0aWNsZSBoNCxhcnRpY2xlIGg1LGFydGljbGUgaDYnKSk7XHJcbiAgICAgIC8vIOWFqOWxj+a7muWKqOadoeWHuuiHqmNvbnRhaW5lcuWFg+e0oFxyXG4gICAgICBsZXQgc2Nyb2xsVG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRhaW5lcicpLnNjcm9sbFRvcDtcclxuICAgICAgbGV0IG1hdGNoVGl0bGUgPSB0aXRsZXMuZmluZCgodGl0bGUpID0+IHNjcm9sbFRvcCA8PSB0aXRsZS5vZmZzZXRUb3AgKyAzMSk7XHJcbiAgICAgIG1hdGNoVGl0bGUgPSBtYXRjaFRpdGxlICYmIG1hdGNoVGl0bGUuaW5uZXJUZXh0O1xyXG5cclxuICAgICAgLy8g5bem5L6n5a+86Iiq5qCPXHJcbiAgICAgIGxldCB0b2NzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjdG9jIC50b2MtdGV4dCcpKTtcclxuICAgICAgbGV0IG1hdGNoVG9jID0gdG9jcy5maW5kKHRvYyA9PiB0b2MuaW5uZXJUZXh0ID09PSBtYXRjaFRpdGxlKTtcclxuXHJcbiAgICAgIGlmIChtYXRjaFRvYykge1xyXG4gICAgICAgIGxldCBwYXJlbnROb2RlID0gbWF0Y2hUb2MucGFyZW50Tm9kZVxyXG4gICAgICAgIHRvY3MuZm9yRWFjaCh0b2MgPT4gdG9jLnBhcmVudE5vZGUuY2xhc3NMaXN0LnJlbW92ZShcInRvYy1saW5rLWFjdGl2ZVwiKSlcclxuICAgICAgICBwYXJlbnROb2RlLmNsYXNzTGlzdC5hZGQoXCJ0b2MtbGluay1hY3RpdmVcIik7XHJcblxyXG4gICAgICAgIGxldCBjdXJyZW50VG9wID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQtY29sJykuc2Nyb2xsVG9wXHJcbiAgICAgICAgb2JqLmN1cnJlbnRUb3AgPSBjdXJyZW50VG9wO1xyXG4gICAgICAgIG9iai5hY3RpdmVPZmZzZXRUb3AgPSBwYXJlbnROb2RlLm9mZnNldFRvcDtcclxuXHJcbiAgICAgICAgaWYgKCF3aW5kb3cucmVxICYmIG9iai5jdXJyZW50VG9wICE9PSBvYmouYWN0aXZlT2Zmc2V0VG9wKSB7XHJcbiAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2Nyb2xsVG9Ub2MuYmluZChvYmopKTtcclxuICAgICAgICAgIHdpbmRvdy5yZXEgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gc2Nyb2xsVG9Ub2MoKSB7XHJcbiAgICBsZXQgY3VycmVudFRvcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0LWNvbCcpLnNjcm9sbFRvcDtcclxuICAgIGxldCBkaWZmID0gdGhpcy5hY3RpdmVPZmZzZXRUb3AgLSB0aGlzLmN1cnJlbnRUb3A7XHJcblxyXG4gICAgbGV0IHRhcmdldFBvc2l0aW9uID0gZGlmZiA+IDAgPyBNYXRoLm1pbihjdXJyZW50VG9wICsgZGlmZiAvIDEwLCB0aGlzLmFjdGl2ZU9mZnNldFRvcCkgOiBNYXRoLm1heChjdXJyZW50VG9wICsgZGlmZiAvIDEwLCB0aGlzLmFjdGl2ZU9mZnNldFRvcClcclxuICAgIC8vIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0LWNvbCcpLnNjcm9sbFRvKDAsIHRhcmdldFBvc2l0aW9uKTtcclxuICAgIC8vIOWFvOWuuWVkZ2VcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0LWNvbCcpLnNjcm9sbFRvcCA9IHRhcmdldFBvc2l0aW9uO1xyXG4gICAgLy8g5pyA5aSn5rua5Yqo55qE6Led56a7XHJcbiAgICBsZXQgbWF4SGVpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQtY29sJykuc2Nyb2xsSGVpZ2h0IC0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQtY29sJykub2Zmc2V0SGVpZ2h0O1xyXG5cclxuICAgIC8vIHRhcmdldFBvc2l0aW9uIDwgbWF4SGVpZ2h0IC0+IOi2hei/h+a7muWKqOi3neemu+WBnOatouWKqOeUu1xyXG4gICAgaWYgKHRhcmdldFBvc2l0aW9uICE9PSB0aGlzLmFjdGl2ZU9mZnNldFRvcCAmJiB0YXJnZXRQb3NpdGlvbiA8IG1heEhlaWdodCkge1xyXG4gICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2Nyb2xsVG9Ub2MuYmluZCh0aGlzKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdpbmRvdy5yZXEgPSBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIEV2ZW50IGhhbmRsaW5nXHJcbiAgZnVuY3Rpb24gYWRkTGlzdGVuZXJzKCkge1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHNjcm9sbENoZWNrKTtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjb250YWluZXInKS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBzY3JvbGxUb2MpO1xyXG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzY3JvbGxDaGVjaygpIHtcclxuICAgIGlmIChkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCA+IGhlaWdodCkgYW5pbWF0ZUhlYWRlciA9IGZhbHNlO1xyXG4gICAgZWxzZSBhbmltYXRlSGVhZGVyID0gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2l6ZSgpIHtcclxuICAgIHdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcbiAgICBsYXJnZUhlYWRlci5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xyXG4gICAgY2FudmFzLndpZHRoID0gd2lkdGg7XHJcbiAgICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYW5pbWF0ZSgpIHtcclxuICAgIGlmIChhbmltYXRlSGVhZGVyKSB7XHJcbiAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICAgIGZvciAodmFyIGkgaW4gY2lyY2xlcykge1xyXG4gICAgICAgIGNpcmNsZXNbaV0uZHJhdygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XHJcbiAgfVxyXG5cclxuICAvLyBDYW52YXMgbWFuaXB1bGF0aW9uXHJcbiAgZnVuY3Rpb24gQ2lyY2xlKCkge1xyXG4gICAgdmFyIF90aGlzID0gdGhpcztcclxuXHJcbiAgICAvLyBjb25zdHJ1Y3RvclxyXG4gICAgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgX3RoaXMucG9zID0ge307XHJcbiAgICAgIGluaXQoKTtcclxuICAgICAgLy9jb25zb2xlLmxvZyhfdGhpcyk7XHJcbiAgICB9KSgpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoKSB7XHJcbiAgICAgIF90aGlzLnBvcy54ID0gTWF0aC5yYW5kb20oKSAqIHdpZHRoO1xyXG4gICAgICBfdGhpcy5wb3MueSA9IGhlaWdodCArIE1hdGgucmFuZG9tKCkgKiAxMDA7XHJcbiAgICAgIF90aGlzLmFscGhhID0gMC4xICsgTWF0aC5yYW5kb20oKSAqIDAuMztcclxuICAgICAgX3RoaXMuc2NhbGUgPSAwLjEgKyBNYXRoLnJhbmRvbSgpICogMC4zO1xyXG4gICAgICBfdGhpcy52ZWxvY2l0eSA9IE1hdGgucmFuZG9tKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5kcmF3ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBpZiAoX3RoaXMuYWxwaGEgPD0gMCkge1xyXG4gICAgICAgIGluaXQoKTtcclxuICAgICAgfVxyXG4gICAgICBfdGhpcy5wb3MueSAtPSBfdGhpcy52ZWxvY2l0eTtcclxuICAgICAgX3RoaXMuYWxwaGEgLT0gMC4wMDA1O1xyXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgIGN0eC5hcmMoX3RoaXMucG9zLngsIF90aGlzLnBvcy55LCBfdGhpcy5zY2FsZSAqIDEwLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xyXG4gICAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsJyArIF90aGlzLmFscGhhICsgJyknO1xyXG4gICAgICBjdHguZmlsbCgpO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGluaXQ6IGluaXRcclxufVxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./source-src/js/anm.js\n")},"./source-src/js/browser.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nvar module = {\n  exports: {}\n};\nvar exports = module.exports;\nvar browser = {\n  versions: function () {\n    var u = window.navigator.userAgent;\n    return {\n      trident: u.indexOf('Trident') > -1,\n      //IE内核\n      presto: u.indexOf('Presto') > -1,\n      //opera内核\n      webKit: u.indexOf('AppleWebKit') > -1,\n      //苹果、谷歌内核\n      gecko: u.indexOf('Gecko') > -1 && u.indexOf('KHTML') == -1,\n      //火狐内核\n      mobile: !!u.match(/AppleWebKit.*Mobile.*/),\n      //是否为移动终端\n      ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/),\n      //ios终端\n      android: u.indexOf('Android') > -1 || u.indexOf('Linux') > -1,\n      //android终端或者uc浏览器\n      iPhone: u.indexOf('iPhone') > -1 || u.indexOf('Mac') > -1,\n      //是否为iPhone或者安卓QQ浏览器\n      iPad: u.indexOf('iPad') > -1,\n      //是否为iPad\n      webApp: u.indexOf('Safari') == -1,\n      //是否为web应用程序，没有头部与底部\n      weixin: u.indexOf('MicroMessenger') == -1 //是否为微信浏览器\n    };\n  }()\n};\n\nmodule.exports = browser;\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zb3VyY2Utc3JjL2pzL2Jyb3dzZXIuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4by10aGVtZS1sdWNreXNoaXAvLi9zb3VyY2Utc3JjL2pzL2Jyb3dzZXIuanM/Mzg3MyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYnJvd3NlciA9IHtcclxuICB2ZXJzaW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHUgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRyaWRlbnQ6IHUuaW5kZXhPZignVHJpZGVudCcpID4gLTEsIC8vSUXlhoXmoLhcclxuICAgICAgcHJlc3RvOiB1LmluZGV4T2YoJ1ByZXN0bycpID4gLTEsIC8vb3BlcmHlhoXmoLhcclxuICAgICAgd2ViS2l0OiB1LmluZGV4T2YoJ0FwcGxlV2ViS2l0JykgPiAtMSwgLy/oi7nmnpzjgIHosLfmrYzlhoXmoLhcclxuICAgICAgZ2Vja286IHUuaW5kZXhPZignR2Vja28nKSA+IC0xICYmIHUuaW5kZXhPZignS0hUTUwnKSA9PSAtMSwgLy/ngavni5DlhoXmoLhcclxuICAgICAgbW9iaWxlOiAhIXUubWF0Y2goL0FwcGxlV2ViS2l0LipNb2JpbGUuKi8pLCAvL+aYr+WQpuS4uuenu+WKqOe7iOerr1xyXG4gICAgICBpb3M6ICEhdS5tYXRjaCgvXFwoaVteO10rOyggVTspPyBDUFUuK01hYyBPUyBYLyksIC8vaW9z57uI56uvXHJcbiAgICAgIGFuZHJvaWQ6IHUuaW5kZXhPZignQW5kcm9pZCcpID4gLTEgfHwgdS5pbmRleE9mKCdMaW51eCcpID4gLTEsIC8vYW5kcm9pZOe7iOerr+aIluiAhXVj5rWP6KeI5ZmoXHJcbiAgICAgIGlQaG9uZTogdS5pbmRleE9mKCdpUGhvbmUnKSA+IC0xIHx8IHUuaW5kZXhPZignTWFjJykgPiAtMSwgLy/mmK/lkKbkuLppUGhvbmXmiJbogIXlronljZNRUea1j+iniOWZqFxyXG4gICAgICBpUGFkOiB1LmluZGV4T2YoJ2lQYWQnKSA+IC0xLCAvL+aYr+WQpuS4umlQYWRcclxuICAgICAgd2ViQXBwOiB1LmluZGV4T2YoJ1NhZmFyaScpID09IC0xLCAvL+aYr+WQpuS4undlYuW6lOeUqOeoi+W6j++8jOayoeacieWktOmDqOS4juW6lemDqFxyXG4gICAgICB3ZWl4aW46IHUuaW5kZXhPZignTWljcm9NZXNzZW5nZXInKSA9PSAtMSAvL+aYr+WQpuS4uuW+ruS/oea1j+iniOWZqFxyXG4gICAgfTtcclxuICB9KClcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBicm93c2VyXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./source-src/js/browser.js\n")},"./source-src/js/slider.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _anm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./anm */ "./source-src/js/anm.js");\n/* harmony import */ var _browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./browser */ "./source-src/js/browser.js");\n/* harmony import */ var _Q__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Q */ "./source-src/js/Q.js");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! es6-promise */ "./node_modules/es6-promise/dist/es6-promise.js");\n/* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(es6_promise__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fetch_ie8__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fetch-ie8 */ "./node_modules/fetch-ie8/fetch.js");\n/* harmony import */ var fetch_ie8__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fetch_ie8__WEBPACK_IMPORTED_MODULE_4__);\n// 动画\n\n// 浏览器判断\n\n// Q 基础库\n\n// 神特么safari不支持fetch\n\n\nvar module = {\n  exports: {}\n};\nvar exports = module.exports;\nwindow.Promise = window.Promise || es6_promise__WEBPACK_IMPORTED_MODULE_3__.Promise;\nwindow.fetch = window.fetch || fetch_ie8__WEBPACK_IMPORTED_MODULE_4__;\nlet localTagKey = "yilia-tag";\nlet localSearchKey = "yilia-search";\nconst isMobile = _browser__WEBPACK_IMPORTED_MODULE_1__["default"].versions.mobile && window.screen.width < 800;\nfunction fixzero(str) {\n  str = str + "";\n  return str.length === 1 ? "0" + str : str;\n}\nfunction setScrollZero() {\n  let $sct = document.querySelectorAll(".tools-section");\n  $sct.forEach(em => {\n    em.scrollTop = 0;\n  });\n}\nfunction init() {\n  let app = new _Q__WEBPACK_IMPORTED_MODULE_2__["default"]({\n    el: "#container",\n    data: {\n      isCtnShow: false,\n      isShow: 0,\n      innerArchive: false,\n      friends: false,\n      aboutme: false,\n      items: [],\n      jsonFail: false,\n      showTags: false,\n      search: ""\n    },\n    methods: {\n      stop: e => {\n        e.stopPropagation();\n      },\n      choseTag: (e, name) => {\n        app.$set("search", "#" + (name ? name : e.target.innerHTML));\n      },\n      clearChose: e => {\n        app.$set("search", "");\n      },\n      toggleTag: e => {\n        app.$set("showTags", !app.showTags);\n        window.localStorage && window.localStorage.setItem(localTagKey, app.showTags);\n      },\n      openSlider: (e, type) => {\n        e.stopPropagation();\n        if (!type) {\n          type = "innerArchive";\n        }\n        // innerArchive: \'所有文章\'\n        // friends: \'友情链接\'\n        // aboutme: \'关于我\'\n        app.$set("innerArchive", false);\n        app.$set("friends", false);\n        app.$set("aboutme", false);\n        app.$set(type, true);\n        app.$set("isShow", true);\n        app.$set("isCtnShow", true);\n        setScrollZero();\n      }\n    },\n    filters: {\n      isFalse: val => {\n        return val === false;\n      },\n      isEmptyStr: str => {\n        return str === "";\n      },\n      isNotEmptyStr: str => {\n        return str !== "";\n      },\n      urlformat: str => {\n        if (window.yiliaConfig && window.yiliaConfig.root) {\n          return window.yiliaConfig.root + str;\n        }\n        return "/" + str;\n      },\n      tagformat: str => {\n        return "#" + str;\n      },\n      dateformat: str => {\n        let d = new Date(str);\n        return d.getFullYear() + "-" + fixzero(d.getMonth() + 1) + "-" + fixzero(d.getDate());\n      }\n    },\n    ready: () => {}\n  });\n  function handleSearch(val) {\n    val = (val || "").toLowerCase();\n    let type = "title";\n    if (val.indexOf("#") === 0) {\n      val = val.substr(1, val.length);\n      type = "tag";\n    }\n    !app.originItems && app.$set("originItems", app.items);\n    let items = app.originItems;\n    items.forEach(item => {\n      let matchTitle = false;\n      if (item.title.toLowerCase().indexOf(val) > -1) {\n        matchTitle = item.title;\n      }\n      let reg = new RegExp(`(.{0,20})(${val})(.{0,20})`, "i");\n      let textArr = item.text.match(reg);\n      let titleArr = item.title.match(reg);\n      let regArr = titleArr || textArr;\n      item.titleArr = titleArr;\n      let matchContent = {};\n      if (regArr) {\n        // 搜索对应内容和内容的边界\n        matchContent = {\n          pre: regArr[1],\n          val: regArr[2],\n          next: regArr[3]\n        };\n      }\n      let matchTags = false;\n      item.tags.forEach(tag => {\n        if (tag.name.toLowerCase().indexOf(val) > -1) {\n          matchTags = true;\n        }\n      });\n      if (type === "title" && (matchTitle || matchContent.val) || type === "tag" && matchTags) {\n        item.matchTitle = matchTitle;\n        item.matchContent = matchContent;\n        item.isShow = true;\n      } else {\n        item.isShow = false;\n      }\n    });\n    items = Array.from(items);\n    if (val) {\n      items && items.sort((a, b) => {\n        if (a.titleArr && !b.titleArr) {\n          return -1;\n        } else {\n          return 1;\n        }\n      });\n    }\n    app.$set("items", items);\n  }\n\n  // 防抖\n  function debounce(func, wait) {\n    var timer = null;\n    return function () {\n      var self = this,\n        args = arguments;\n      if (timer) {\n        clearTimeout(timer);\n      }\n      timer = setTimeout(function () {\n        timer = null;\n        return typeof func === "function" && func.apply(self, args);\n      }, wait);\n    };\n  }\n  let debounceHandleSearch = debounce(handleSearch, 200);\n  app.$watch("search", function (val, oldVal) {\n    window.localStorage && window.localStorage.setItem(localSearchKey, val);\n    debounceHandleSearch(val);\n  });\n  const query = new AV.Query("TestObject");\n  query.limit(1000);\n  query.find().then(TestObject => {\n    let data = TestObject.map(item => item.attributes);\n    data.forEach(em => {\n      em.isShow = true;\n    });\n    app.$set("items", data);\n\n    // 搜索历史记录\n    let searchWording = window.localStorage && window.localStorage.getItem(localSearchKey) || "";\n    app.$set("search", searchWording);\n    searchWording !== "" && handleSearch(searchWording);\n  });\n\n  // 隐藏\n  document.querySelector("#container").onclick = e => {\n    if (app.isShow) {\n      app.$set("isShow", false);\n      setTimeout(() => {\n        app.$set("isCtnShow", false);\n      }, 300);\n    }\n  };\n\n  // tag 显示/隐藏\n  let localTag = false;\n  if (window.localStorage) {\n    localTag = window.localStorage.getItem(localTagKey);\n  }\n  let isTagOn = "false";\n  if (localTag === null) {\n    isTagOn = window.yiliaConfig && window.yiliaConfig.showTags ? "true" : "false";\n  } else {\n    isTagOn = window.localStorage && window.localStorage.getItem(localTagKey) || "false";\n  }\n  app.$set("showTags", JSON.parse(isTagOn));\n\n  // 其他标签点击\n  // 标签\n  let $tags = document.querySelectorAll(".tagcloud a.js-tag");\n  for (var i = 0, len = $tags.length; i < len; i++) {\n    let $em = $tags[i];\n    $em.setAttribute("href", "javascript:void(0)");\n    $em.onclick = e => {\n      e.stopPropagation();\n      app.$set("innerArchive", true);\n      app.$set("friends", false);\n      app.$set("aboutme", false);\n      app.$set("isShow", true);\n      app.$set("isCtnShow", true);\n      app.$set("search", "#" + $em.innerHTML);\n      setScrollZero();\n      return false;\n    };\n  }\n}\n\n// 防止DOMContentLoaded时间加载完成，还未执行init\nif (document.querySelector("#container")) {\n  init();\n  if (!isMobile) {\n    _anm__WEBPACK_IMPORTED_MODULE_0__["default"].init();\n  }\n}\n\n// 等待dom生成\ndocument.addEventListener("DOMContentLoaded", function () {\n  init();\n  if (!isMobile) {\n    _anm__WEBPACK_IMPORTED_MODULE_0__["default"].init();\n  }\n});\nmodule.exports = {};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./source-src/js/slider.js\n')},"./node_modules/es6-promise/dist/es6-promise.js":function(module,__unused_webpack_exports,__webpack_require__){eval("/*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */\n\n(function (global, factory) {\n\t true ? module.exports = factory() :\n\t0;\n}(this, (function () { 'use strict';\n\nfunction objectOrFunction(x) {\n  var type = typeof x;\n  return x !== null && (type === 'object' || type === 'function');\n}\n\nfunction isFunction(x) {\n  return typeof x === 'function';\n}\n\n\n\nvar _isArray = void 0;\nif (Array.isArray) {\n  _isArray = Array.isArray;\n} else {\n  _isArray = function (x) {\n    return Object.prototype.toString.call(x) === '[object Array]';\n  };\n}\n\nvar isArray = _isArray;\n\nvar len = 0;\nvar vertxNext = void 0;\nvar customSchedulerFn = void 0;\n\nvar asap = function asap(callback, arg) {\n  queue[len] = callback;\n  queue[len + 1] = arg;\n  len += 2;\n  if (len === 2) {\n    // If len is 2, that means that we need to schedule an async flush.\n    // If additional callbacks are queued before the queue is flushed, they\n    // will be processed by this flush that we are scheduling.\n    if (customSchedulerFn) {\n      customSchedulerFn(flush);\n    } else {\n      scheduleFlush();\n    }\n  }\n};\n\nfunction setScheduler(scheduleFn) {\n  customSchedulerFn = scheduleFn;\n}\n\nfunction setAsap(asapFn) {\n  asap = asapFn;\n}\n\nvar browserWindow = typeof window !== 'undefined' ? window : undefined;\nvar browserGlobal = browserWindow || {};\nvar BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\nvar isNode = typeof self === 'undefined' && typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n\n// test for web worker but not in IE10\nvar isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';\n\n// node\nfunction useNextTick() {\n  // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n  // see https://github.com/cujojs/when/issues/410 for details\n  return function () {\n    return process.nextTick(flush);\n  };\n}\n\n// vertx\nfunction useVertxTimer() {\n  if (typeof vertxNext !== 'undefined') {\n    return function () {\n      vertxNext(flush);\n    };\n  }\n\n  return useSetTimeout();\n}\n\nfunction useMutationObserver() {\n  var iterations = 0;\n  var observer = new BrowserMutationObserver(flush);\n  var node = document.createTextNode('');\n  observer.observe(node, { characterData: true });\n\n  return function () {\n    node.data = iterations = ++iterations % 2;\n  };\n}\n\n// web worker\nfunction useMessageChannel() {\n  var channel = new MessageChannel();\n  channel.port1.onmessage = flush;\n  return function () {\n    return channel.port2.postMessage(0);\n  };\n}\n\nfunction useSetTimeout() {\n  // Store setTimeout reference so es6-promise will be unaffected by\n  // other code modifying setTimeout (like sinon.useFakeTimers())\n  var globalSetTimeout = setTimeout;\n  return function () {\n    return globalSetTimeout(flush, 1);\n  };\n}\n\nvar queue = new Array(1000);\nfunction flush() {\n  for (var i = 0; i < len; i += 2) {\n    var callback = queue[i];\n    var arg = queue[i + 1];\n\n    callback(arg);\n\n    queue[i] = undefined;\n    queue[i + 1] = undefined;\n  }\n\n  len = 0;\n}\n\nfunction attemptVertx() {\n  try {\n    var vertx = Function('return this')().require('vertx');\n    vertxNext = vertx.runOnLoop || vertx.runOnContext;\n    return useVertxTimer();\n  } catch (e) {\n    return useSetTimeout();\n  }\n}\n\nvar scheduleFlush = void 0;\n// Decide what async method to use to triggering processing of queued callbacks:\nif (isNode) {\n  scheduleFlush = useNextTick();\n} else if (BrowserMutationObserver) {\n  scheduleFlush = useMutationObserver();\n} else if (isWorker) {\n  scheduleFlush = useMessageChannel();\n} else if (browserWindow === undefined && \"function\" === 'function') {\n  scheduleFlush = attemptVertx();\n} else {\n  scheduleFlush = useSetTimeout();\n}\n\nfunction then(onFulfillment, onRejection) {\n  var parent = this;\n\n  var child = new this.constructor(noop);\n\n  if (child[PROMISE_ID] === undefined) {\n    makePromise(child);\n  }\n\n  var _state = parent._state;\n\n\n  if (_state) {\n    var callback = arguments[_state - 1];\n    asap(function () {\n      return invokeCallback(_state, child, callback, parent._result);\n    });\n  } else {\n    subscribe(parent, child, onFulfillment, onRejection);\n  }\n\n  return child;\n}\n\n/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/\nfunction resolve$1(object) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (object && typeof object === 'object' && object.constructor === Constructor) {\n    return object;\n  }\n\n  var promise = new Constructor(noop);\n  resolve(promise, object);\n  return promise;\n}\n\nvar PROMISE_ID = Math.random().toString(36).substring(2);\n\nfunction noop() {}\n\nvar PENDING = void 0;\nvar FULFILLED = 1;\nvar REJECTED = 2;\n\nfunction selfFulfillment() {\n  return new TypeError(\"You cannot resolve a promise with itself\");\n}\n\nfunction cannotReturnOwn() {\n  return new TypeError('A promises callback cannot return that same promise.');\n}\n\nfunction tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n  try {\n    then$$1.call(value, fulfillmentHandler, rejectionHandler);\n  } catch (e) {\n    return e;\n  }\n}\n\nfunction handleForeignThenable(promise, thenable, then$$1) {\n  asap(function (promise) {\n    var sealed = false;\n    var error = tryThen(then$$1, thenable, function (value) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n      if (thenable !== value) {\n        resolve(promise, value);\n      } else {\n        fulfill(promise, value);\n      }\n    }, function (reason) {\n      if (sealed) {\n        return;\n      }\n      sealed = true;\n\n      reject(promise, reason);\n    }, 'Settle: ' + (promise._label || ' unknown promise'));\n\n    if (!sealed && error) {\n      sealed = true;\n      reject(promise, error);\n    }\n  }, promise);\n}\n\nfunction handleOwnThenable(promise, thenable) {\n  if (thenable._state === FULFILLED) {\n    fulfill(promise, thenable._result);\n  } else if (thenable._state === REJECTED) {\n    reject(promise, thenable._result);\n  } else {\n    subscribe(thenable, undefined, function (value) {\n      return resolve(promise, value);\n    }, function (reason) {\n      return reject(promise, reason);\n    });\n  }\n}\n\nfunction handleMaybeThenable(promise, maybeThenable, then$$1) {\n  if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n    handleOwnThenable(promise, maybeThenable);\n  } else {\n    if (then$$1 === undefined) {\n      fulfill(promise, maybeThenable);\n    } else if (isFunction(then$$1)) {\n      handleForeignThenable(promise, maybeThenable, then$$1);\n    } else {\n      fulfill(promise, maybeThenable);\n    }\n  }\n}\n\nfunction resolve(promise, value) {\n  if (promise === value) {\n    reject(promise, selfFulfillment());\n  } else if (objectOrFunction(value)) {\n    var then$$1 = void 0;\n    try {\n      then$$1 = value.then;\n    } catch (error) {\n      reject(promise, error);\n      return;\n    }\n    handleMaybeThenable(promise, value, then$$1);\n  } else {\n    fulfill(promise, value);\n  }\n}\n\nfunction publishRejection(promise) {\n  if (promise._onerror) {\n    promise._onerror(promise._result);\n  }\n\n  publish(promise);\n}\n\nfunction fulfill(promise, value) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n\n  promise._result = value;\n  promise._state = FULFILLED;\n\n  if (promise._subscribers.length !== 0) {\n    asap(publish, promise);\n  }\n}\n\nfunction reject(promise, reason) {\n  if (promise._state !== PENDING) {\n    return;\n  }\n  promise._state = REJECTED;\n  promise._result = reason;\n\n  asap(publishRejection, promise);\n}\n\nfunction subscribe(parent, child, onFulfillment, onRejection) {\n  var _subscribers = parent._subscribers;\n  var length = _subscribers.length;\n\n\n  parent._onerror = null;\n\n  _subscribers[length] = child;\n  _subscribers[length + FULFILLED] = onFulfillment;\n  _subscribers[length + REJECTED] = onRejection;\n\n  if (length === 0 && parent._state) {\n    asap(publish, parent);\n  }\n}\n\nfunction publish(promise) {\n  var subscribers = promise._subscribers;\n  var settled = promise._state;\n\n  if (subscribers.length === 0) {\n    return;\n  }\n\n  var child = void 0,\n      callback = void 0,\n      detail = promise._result;\n\n  for (var i = 0; i < subscribers.length; i += 3) {\n    child = subscribers[i];\n    callback = subscribers[i + settled];\n\n    if (child) {\n      invokeCallback(settled, child, callback, detail);\n    } else {\n      callback(detail);\n    }\n  }\n\n  promise._subscribers.length = 0;\n}\n\nfunction invokeCallback(settled, promise, callback, detail) {\n  var hasCallback = isFunction(callback),\n      value = void 0,\n      error = void 0,\n      succeeded = true;\n\n  if (hasCallback) {\n    try {\n      value = callback(detail);\n    } catch (e) {\n      succeeded = false;\n      error = e;\n    }\n\n    if (promise === value) {\n      reject(promise, cannotReturnOwn());\n      return;\n    }\n  } else {\n    value = detail;\n  }\n\n  if (promise._state !== PENDING) {\n    // noop\n  } else if (hasCallback && succeeded) {\n    resolve(promise, value);\n  } else if (succeeded === false) {\n    reject(promise, error);\n  } else if (settled === FULFILLED) {\n    fulfill(promise, value);\n  } else if (settled === REJECTED) {\n    reject(promise, value);\n  }\n}\n\nfunction initializePromise(promise, resolver) {\n  try {\n    resolver(function resolvePromise(value) {\n      resolve(promise, value);\n    }, function rejectPromise(reason) {\n      reject(promise, reason);\n    });\n  } catch (e) {\n    reject(promise, e);\n  }\n}\n\nvar id = 0;\nfunction nextId() {\n  return id++;\n}\n\nfunction makePromise(promise) {\n  promise[PROMISE_ID] = id++;\n  promise._state = undefined;\n  promise._result = undefined;\n  promise._subscribers = [];\n}\n\nfunction validationError() {\n  return new Error('Array Methods must be provided an Array');\n}\n\nvar Enumerator = function () {\n  function Enumerator(Constructor, input) {\n    this._instanceConstructor = Constructor;\n    this.promise = new Constructor(noop);\n\n    if (!this.promise[PROMISE_ID]) {\n      makePromise(this.promise);\n    }\n\n    if (isArray(input)) {\n      this.length = input.length;\n      this._remaining = input.length;\n\n      this._result = new Array(this.length);\n\n      if (this.length === 0) {\n        fulfill(this.promise, this._result);\n      } else {\n        this.length = this.length || 0;\n        this._enumerate(input);\n        if (this._remaining === 0) {\n          fulfill(this.promise, this._result);\n        }\n      }\n    } else {\n      reject(this.promise, validationError());\n    }\n  }\n\n  Enumerator.prototype._enumerate = function _enumerate(input) {\n    for (var i = 0; this._state === PENDING && i < input.length; i++) {\n      this._eachEntry(input[i], i);\n    }\n  };\n\n  Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n    var c = this._instanceConstructor;\n    var resolve$$1 = c.resolve;\n\n\n    if (resolve$$1 === resolve$1) {\n      var _then = void 0;\n      var error = void 0;\n      var didError = false;\n      try {\n        _then = entry.then;\n      } catch (e) {\n        didError = true;\n        error = e;\n      }\n\n      if (_then === then && entry._state !== PENDING) {\n        this._settledAt(entry._state, i, entry._result);\n      } else if (typeof _then !== 'function') {\n        this._remaining--;\n        this._result[i] = entry;\n      } else if (c === Promise$1) {\n        var promise = new c(noop);\n        if (didError) {\n          reject(promise, error);\n        } else {\n          handleMaybeThenable(promise, entry, _then);\n        }\n        this._willSettleAt(promise, i);\n      } else {\n        this._willSettleAt(new c(function (resolve$$1) {\n          return resolve$$1(entry);\n        }), i);\n      }\n    } else {\n      this._willSettleAt(resolve$$1(entry), i);\n    }\n  };\n\n  Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n    var promise = this.promise;\n\n\n    if (promise._state === PENDING) {\n      this._remaining--;\n\n      if (state === REJECTED) {\n        reject(promise, value);\n      } else {\n        this._result[i] = value;\n      }\n    }\n\n    if (this._remaining === 0) {\n      fulfill(promise, this._result);\n    }\n  };\n\n  Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n    var enumerator = this;\n\n    subscribe(promise, undefined, function (value) {\n      return enumerator._settledAt(FULFILLED, i, value);\n    }, function (reason) {\n      return enumerator._settledAt(REJECTED, i, reason);\n    });\n  };\n\n  return Enumerator;\n}();\n\n/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/\nfunction all(entries) {\n  return new Enumerator(this, entries).promise;\n}\n\n/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/\nfunction race(entries) {\n  /*jshint validthis:true */\n  var Constructor = this;\n\n  if (!isArray(entries)) {\n    return new Constructor(function (_, reject) {\n      return reject(new TypeError('You must pass an array to race.'));\n    });\n  } else {\n    return new Constructor(function (resolve, reject) {\n      var length = entries.length;\n      for (var i = 0; i < length; i++) {\n        Constructor.resolve(entries[i]).then(resolve, reject);\n      }\n    });\n  }\n}\n\n/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/\nfunction reject$1(reason) {\n  /*jshint validthis:true */\n  var Constructor = this;\n  var promise = new Constructor(noop);\n  reject(promise, reason);\n  return promise;\n}\n\nfunction needsResolver() {\n  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');\n}\n\nfunction needsNew() {\n  throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n}\n\n/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/\n\nvar Promise$1 = function () {\n  function Promise(resolver) {\n    this[PROMISE_ID] = nextId();\n    this._result = this._state = undefined;\n    this._subscribers = [];\n\n    if (noop !== resolver) {\n      typeof resolver !== 'function' && needsResolver();\n      this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n    }\n  }\n\n  /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */\n\n  /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */\n\n\n  Promise.prototype.catch = function _catch(onRejection) {\n    return this.then(null, onRejection);\n  };\n\n  /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */\n\n\n  Promise.prototype.finally = function _finally(callback) {\n    var promise = this;\n    var constructor = promise.constructor;\n\n    if (isFunction(callback)) {\n      return promise.then(function (value) {\n        return constructor.resolve(callback()).then(function () {\n          return value;\n        });\n      }, function (reason) {\n        return constructor.resolve(callback()).then(function () {\n          throw reason;\n        });\n      });\n    }\n\n    return promise.then(callback, callback);\n  };\n\n  return Promise;\n}();\n\nPromise$1.prototype.then = then;\nPromise$1.all = all;\nPromise$1.race = race;\nPromise$1.resolve = resolve$1;\nPromise$1.reject = reject$1;\nPromise$1._setScheduler = setScheduler;\nPromise$1._setAsap = setAsap;\nPromise$1._asap = asap;\n\n/*global self*/\nfunction polyfill() {\n  var local = void 0;\n\n  if (typeof __webpack_require__.g !== 'undefined') {\n    local = __webpack_require__.g;\n  } else if (typeof self !== 'undefined') {\n    local = self;\n  } else {\n    try {\n      local = Function('return this')();\n    } catch (e) {\n      throw new Error('polyfill failed because global object is unavailable in this environment');\n    }\n  }\n\n  var P = local.Promise;\n\n  if (P) {\n    var promiseToString = null;\n    try {\n      promiseToString = Object.prototype.toString.call(P.resolve());\n    } catch (e) {\n      // silently ignored\n    }\n\n    if (promiseToString === '[object Promise]' && !P.cast) {\n      return;\n    }\n  }\n\n  local.Promise = Promise$1;\n}\n\n// Strange compat..\nPromise$1.polyfill = polyfill;\nPromise$1.Promise = Promise$1;\n\nreturn Promise$1;\n\n})));\n\n\n\n//# sourceMappingURL=es6-promise.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/es6-promise/dist/es6-promise.js\n")},"./node_modules/fetch-ie8/fetch.js":function(module){eval("(function(self) {\n  'use strict';\n\n  // if __disableNativeFetch is set to true, the it will always polyfill fetch\n  // with Ajax.\n  if (!self.__disableNativeFetch && self.fetch) {\n    return\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob, options) {\n    var reader = new FileReader()\n    var contentType = options.headers.map['content-type'] ? options.headers.map['content-type'].toString() : ''\n    var regex = /charset\\=[0-9a-zA-Z\\-\\_]*;?/\n    var _charset = blob.type.match(regex) || contentType.match(regex)\n    var args = [blob]\n\n    if(_charset) {\n      args.push(_charset[0].replace(/^charset\\=/, '').replace(/;$/, ''))\n    }\n\n    reader.readAsText.apply(reader, args)\n    return fileReaderReady(reader)\n  }\n\n  var support = {\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob();\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n\n    this._initBody = function(body, options) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n        this._options = options\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob, this._options)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body, options)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = xhr.getAllResponseHeaders().trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this._initBody(bodyInit, options)\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers;\n  self.Request = Request;\n  self.Response = Response;\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return;\n      }\n\n      var __onLoadHandled = false;\n\n      function onload() {\n        if (xhr.readyState !== 4) {\n          return\n        }\n        var status = (xhr.status === 1223) ? 204 : xhr.status\n        if (status < 100 || status > 599) {\n          if (__onLoadHandled) { return; } else { __onLoadHandled = true; }\n          reject(new TypeError('Network request failed'))\n          return\n        }\n        var options = {\n          status: status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n\n        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }\n        resolve(new Response(body, options))\n      }\n      xhr.onreadystatechange = onload;\n      xhr.onload = onload;\n      xhr.onerror = function() {\n        if (__onLoadHandled) { return; } else { __onLoadHandled = true; }\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      // `withCredentials` should be setted after calling `.open` in IE10\n      // http://stackoverflow.com/a/19667959/1219343\n      try {\n        if (request.credentials === 'include') {\n          if ('withCredentials' in xhr) {\n            xhr.withCredentials = true;\n          } else {\n            console && console.warn && console.warn('withCredentials is not supported, you can ignore this warning');\n          }\n        }\n      } catch (e) {\n        console && console.warn && console.warn('set withCredentials error:' + e);\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n\n  // Support CommonJS\n  if ( true && module.exports) {\n    module.exports = self.fetch;\n  }\n})(typeof self !== 'undefined' ? self : this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fetch-ie8/fetch.js\n")}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var C=__webpack_module_cache__[g]={exports:{}};return __webpack_modules__[g].call(C.exports,C,C.exports,__webpack_require__),C.exports}__webpack_require__.amdO={},__webpack_require__.n=g=>{var I=g&&g.__esModule?()=>g.default:()=>g;return __webpack_require__.d(I,{a:I}),I},__webpack_require__.d=(g,I)=>{for(var C in I)__webpack_require__.o(I,C)&&!__webpack_require__.o(g,C)&&Object.defineProperty(g,C,{enumerable:!0,get:I[C]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}(),__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./source-src/js/slider.js")})();